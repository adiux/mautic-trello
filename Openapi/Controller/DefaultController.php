<?php

/**
 * DefaultController
 * PHP version 5.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://github.com/openapitools/openapi-generator
 */

/**
 * Idea2 Trello API.
 *
 * Create card in Trello
 *
 * The version of the OpenAPI document: 0.1.1
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace MauticPlugin\Idea2TrelloBundle\Openapi\Controller;

use Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use MauticPlugin\Idea2TrelloBundle\Openapi\Api\DefaultApiInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * DefaultController Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://github.com/openapitools/openapi-generator
 */
class DefaultController extends Controller
{
    /**
     * Operation addCard.
     *
     * @param Request $request the Symfony request to handle
     *
     * @return Response the Symfony response
     */
    public function addCardAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        $inputFormat = $request->headers->has('Content-Type') ? $request->headers->get('Content-Type') : $consumes[0];
        if (!in_array($inputFormat, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept') ? $request->headers->get('Accept') : '*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if (null === $responseFormat) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'basicAuth' required
        // HTTP basic authentication required
        $securitybasicAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $newCard = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $newCard = $this->deserialize($newCard, 'MauticPlugin\Idea2TrelloBundle\Openapi\Model\NewCard', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type('MauticPlugin\\Idea2TrelloBundle\\Openapi\\Model\\NewCard');
        $asserts[] = new Assert\Valid();
        $response = $this->validate($newCard, $asserts);
        if ($response instanceof Response) {
            return $response;
        }

        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'basicAuth'
            $handler->setbasicAuth($securitybasicAuth);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->addCard($newCard, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'A Trello Card';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'A Trello Card';

                    break;
                case 400:
                    $message = 'Bad request';

                    break;
                case 401:
                    $message = 'Authentication information is missing or invalid';

                    break;
                case 404:
                    $message = 'Not found';

                    break;
            }

            return new Response(
                null !== $result ? $this->serialize($result, $responseFormat) : '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message,
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     *
     * @return DefaultApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('default');
    }
}
