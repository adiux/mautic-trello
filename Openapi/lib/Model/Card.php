<?php
/**
 * Card
 *
 * PHP version 5
 *
 * @category Class
 * @package  MauticPlugin\Idea2TrelloBundle\Openapi\lib
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Idea2 Trello API
 *
 * Create or update a card via the Trello API
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MauticPlugin\Idea2TrelloBundle\Openapi\lib\Model;

use \ArrayAccess;
use \MauticPlugin\Idea2TrelloBundle\Openapi\lib\ObjectSerializer;

/**
 * Card Class Doc Comment
 *
 * @category Class
 * @package  MauticPlugin\Idea2TrelloBundle\Openapi\lib
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Card implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Card';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'idList' => 'string',
        'desc' => 'string',
        'pos' => 'string',
        'due' => '\DateTime',
        'urlSource' => 'string',
        'keepFromSource' => 'string',
        'id' => 'string',
        'labels' => 'object[]',
        'url' => 'string',
        'dateLastActivity' => '\DateTime',
        'idMembers' => 'string',
        'attachments' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'idList' => null,
        'desc' => null,
        'pos' => null,
        'due' => 'date-time',
        'urlSource' => 'uri',
        'keepFromSource' => null,
        'id' => null,
        'labels' => null,
        'url' => 'uri',
        'dateLastActivity' => 'date-time',
        'idMembers' => null,
        'attachments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'idList' => 'idList',
        'desc' => 'desc',
        'pos' => 'pos',
        'due' => 'due',
        'urlSource' => 'urlSource',
        'keepFromSource' => 'keepFromSource',
        'id' => 'id',
        'labels' => 'labels',
        'url' => 'url',
        'dateLastActivity' => 'dateLastActivity',
        'idMembers' => 'idMembers',
        'attachments' => 'attachments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'idList' => 'setIdList',
        'desc' => 'setDesc',
        'pos' => 'setPos',
        'due' => 'setDue',
        'urlSource' => 'setUrlSource',
        'keepFromSource' => 'setKeepFromSource',
        'id' => 'setId',
        'labels' => 'setLabels',
        'url' => 'setUrl',
        'dateLastActivity' => 'setDateLastActivity',
        'idMembers' => 'setIdMembers',
        'attachments' => 'setAttachments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'idList' => 'getIdList',
        'desc' => 'getDesc',
        'pos' => 'getPos',
        'due' => 'getDue',
        'urlSource' => 'getUrlSource',
        'keepFromSource' => 'getKeepFromSource',
        'id' => 'getId',
        'labels' => 'getLabels',
        'url' => 'getUrl',
        'dateLastActivity' => 'getDateLastActivity',
        'idMembers' => 'getIdMembers',
        'attachments' => 'getAttachments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const POS_TOP = 'top';
    const POS_BOTTOM = 'bottom';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPosAllowableValues()
    {
        return [
            self::POS_TOP,
            self::POS_BOTTOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['idList'] = isset($data['idList']) ? $data['idList'] : null;
        $this->container['desc'] = isset($data['desc']) ? $data['desc'] : null;
        $this->container['pos'] = isset($data['pos']) ? $data['pos'] : null;
        $this->container['due'] = isset($data['due']) ? $data['due'] : null;
        $this->container['urlSource'] = isset($data['urlSource']) ? $data['urlSource'] : null;
        $this->container['keepFromSource'] = isset($data['keepFromSource']) ? $data['keepFromSource'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['dateLastActivity'] = isset($data['dateLastActivity']) ? $data['dateLastActivity'] : null;
        $this->container['idMembers'] = isset($data['idMembers']) ? $data['idMembers'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['idList'] === null) {
            $invalidProperties[] = "'idList' can't be null";
        }
        if ((mb_strlen($this->container['idList']) < 1)) {
            $invalidProperties[] = "invalid value for 'idList', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getPosAllowableValues();
        if (!is_null($this->container['pos']) && !in_array($this->container['pos'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pos', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Card Name
     *
     * @return $this
     */
    public function setName($name)
    {

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Card., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets idList
     *
     * @return string
     */
    public function getIdList()
    {
        return $this->container['idList'];
    }

    /**
     * Sets idList
     *
     * @param string $idList The ID of the list the card should be created in
     *
     * @return $this
     */
    public function setIdList($idList)
    {

        if ((mb_strlen($idList) < 1)) {
            throw new \InvalidArgumentException('invalid length for $idList when calling Card., must be bigger than or equal to 1.');
        }

        $this->container['idList'] = $idList;

        return $this;
    }

    /**
     * Gets desc
     *
     * @return string|null
     */
    public function getDesc()
    {
        return $this->container['desc'];
    }

    /**
     * Sets desc
     *
     * @param string|null $desc Card Description
     *
     * @return $this
     */
    public function setDesc($desc)
    {
        $this->container['desc'] = $desc;

        return $this;
    }

    /**
     * Gets pos
     *
     * @return string|null
     */
    public function getPos()
    {
        return $this->container['pos'];
    }

    /**
     * Sets pos
     *
     * @param string|null $pos pos
     *
     * @return $this
     */
    public function setPos($pos)
    {
        $allowedValues = $this->getPosAllowableValues();
        if (!is_null($pos) && !in_array($pos, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pos', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pos'] = $pos;

        return $this;
    }

    /**
     * Gets due
     *
     * @return \DateTime|null
     */
    public function getDue()
    {
        return $this->container['due'];
    }

    /**
     * Sets due
     *
     * @param \DateTime|null $due full-date notation as defined by RFC 3339, section 5.6. Default Timezone is UTC
     *
     * @return $this
     */
    public function setDue($due)
    {
        $this->container['due'] = $due;

        return $this;
    }

    /**
     * Gets urlSource
     *
     * @return string|null
     */
    public function getUrlSource()
    {
        return $this->container['urlSource'];
    }

    /**
     * Sets urlSource
     *
     * @param string|null $urlSource urlSource
     *
     * @return $this
     */
    public function setUrlSource($urlSource)
    {
        $this->container['urlSource'] = $urlSource;

        return $this;
    }

    /**
     * Gets keepFromSource
     *
     * @return string|null
     */
    public function getKeepFromSource()
    {
        return $this->container['keepFromSource'];
    }

    /**
     * Sets keepFromSource
     *
     * @param string|null $keepFromSource If using idCardSource you can specify which properties to copy over.
     *
     * @return $this
     */
    public function setKeepFromSource($keepFromSource)
    {
        $this->container['keepFromSource'] = $keepFromSource;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {

        if ((mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Card., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return object[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param object[]|null $labels labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets dateLastActivity
     *
     * @return \DateTime|null
     */
    public function getDateLastActivity()
    {
        return $this->container['dateLastActivity'];
    }

    /**
     * Sets dateLastActivity
     *
     * @param \DateTime|null $dateLastActivity full-date notation as defined by RFC 3339, section 5.6. Default Timezone is UTC
     *
     * @return $this
     */
    public function setDateLastActivity($dateLastActivity)
    {
        $this->container['dateLastActivity'] = $dateLastActivity;

        return $this;
    }

    /**
     * Gets idMembers
     *
     * @return string|null
     */
    public function getIdMembers()
    {
        return $this->container['idMembers'];
    }

    /**
     * Sets idMembers
     *
     * @param string|null $idMembers Comma-separated list of member IDs
     *
     * @return $this
     */
    public function setIdMembers($idMembers)
    {
        $this->container['idMembers'] = $idMembers;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return object[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param object[]|null $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


